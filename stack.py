#!/usr/bin/python
# 2020 - matth
#
# crappy stack string helper, just copy paste ghidra decomp...
#
# % cat | stack.py
#    local_1d8 = 0x6b;
#    local_1d6 = 0x65;
#    local_1d4 = 0x72;
#    local_1d2 = 0x6e;
#    local_1d0 = 0x65;
#    local_1ce = 0x6c;
#    local_1cc = 0x33;
#    local_1ca = 0x32;
#    local_1c8 = 0x2e;
#    local_1c6 = 100;
#    local_1c4 = 0x6c;
#    local_1c2 = 0x6c;
#    local_1c0 = 0;
#size: 8
#b'kernel32.dll\x00'



import re
import struct

values = []


def guess_size(values):
    sz = max([len(_) for _ in values])

    if sz <= 2:
        return 8
    if sz > 2 and sz <= 8:
        return 32
    if sz > 8 and sz <= 16:
        return 64

    raise Exception("cant guess size")

def unpack(b, sz):
    match sz:
        case 8:
            return int(b, 16).to_bytes(1, 'little')
        case 32:
            mod = "<I"
        case 64:
            mod = "<Q"
        case _:
            raise Exception("unsupported size")

    return struct.pack(mod, int(b, 16))


def main():
    values = []
    while True:
        try:
            values += re.findall("= ((?:0x)?[0-9a-fA-F]+);", input())
        except EOFError:
            break

    for n, v in enumerate(values):
        if v.startswith('0x'):
            values[n] = v[2:]
        else:
            values[n] = hex(int(v))[2:]

    size = guess_size(values)
    print(f"size: {size}")

    out = b''
    for v in values:
        out += unpack(v, size)

    print(out)


if __name__ == "__main__":
    main()
